
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.test
{
public sealed partial class TestRange : Luban.BeanBase
{
    public TestRange(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["f1"].IsNumber) { throw new SerializationException(); }  F1 = _buf["f1"]; }
        { if(!_buf["f2"].IsNumber) { throw new SerializationException(); }  F2 = _buf["f2"]; }
        { if(!_buf["d1"].IsNumber) { throw new SerializationException(); }  D1 = _buf["d1"]; }
        { if(!_buf["d2"].IsNumber) { throw new SerializationException(); }  D2 = _buf["d2"]; }
        { if(!_buf["i1"].IsNumber) { throw new SerializationException(); }  I1 = _buf["i1"]; }
        { if(!_buf["i2"].IsNumber) { throw new SerializationException(); }  I2 = _buf["i2"]; }
        { if(!_buf["i3"].IsNumber) { throw new SerializationException(); }  I3 = _buf["i3"]; }
        { if(!_buf["i4"].IsNumber) { throw new SerializationException(); }  I4 = _buf["i4"]; }
        { if(!_buf["l1"].IsNumber) { throw new SerializationException(); }  L1 = _buf["l1"]; }
        { if(!_buf["l2"].IsNumber) { throw new SerializationException(); }  L2 = _buf["l2"]; }
        { if(!_buf["l3"].IsNumber) { throw new SerializationException(); }  L3 = _buf["l3"]; }
        { if(!_buf["l4"].IsNumber) { throw new SerializationException(); }  L4 = _buf["l4"]; }
    }

    public static TestRange DeserializeTestRange(JSONNode _buf)
    {
        return new test.TestRange(_buf);
    }

    public readonly int Id;
    public readonly float F1;
    public readonly float F2;
    public readonly double D1;
    public readonly double D2;
    public readonly int I1;
    public readonly int I2;
    public readonly int I3;
    public readonly int I4;
    public readonly long L1;
    public readonly long L2;
    public readonly long L3;
    public readonly long L4;
   
    public const int __ID__ = 1949088079;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "f1:" + F1 + ","
        + "f2:" + F2 + ","
        + "d1:" + D1 + ","
        + "d2:" + D2 + ","
        + "i1:" + I1 + ","
        + "i2:" + I2 + ","
        + "i3:" + I3 + ","
        + "i4:" + I4 + ","
        + "l1:" + L1 + ","
        + "l2:" + L2 + ","
        + "l3:" + L3 + ","
        + "l4:" + L4 + ","
        + "}";
    }
}
}

