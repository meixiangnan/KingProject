
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.test
{
public sealed partial class TestSep : Luban.BeanBase
{
    public TestSep(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { var __json0 = _buf["a1"]; if(!__json0.IsArray) { throw new SerializationException(); } A1 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  A1.Add(__v0); }   }
        { var __json0 = _buf["a2"]; if(!__json0.IsArray) { throw new SerializationException(); } A2 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  A2.Add(__v0); }   }
        { var __json0 = _buf["a3"]; if(!__json0.IsArray) { throw new SerializationException(); } A3 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  A3.Add(__v0); }   }
        { if(!_buf["x2"].IsObject) { throw new SerializationException(); }  X2 = global::cfg.test.SepBean1.DeserializeSepBean1(_buf["x2"]);  }
        { if(!_buf["x3"].IsObject) { throw new SerializationException(); }  X3 = global::cfg.test.SepVector.DeserializeSepVector(_buf["x3"]);  }
        { var __json0 = _buf["x4"]; if(!__json0.IsArray) { throw new SerializationException(); } X4 = new System.Collections.Generic.List<test.SepVector>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { test.SepVector __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = global::cfg.test.SepVector.DeserializeSepVector(__e0);  }  X4.Add(__v0); }   }
        { var __json0 = _buf["x6"]; if(!__json0.IsArray) { throw new SerializationException(); } X6 = new System.Collections.Generic.List<test.SepBean1>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { test.SepBean1 __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = global::cfg.test.SepBean1.DeserializeSepBean1(__e0);  }  X6.Add(__v0); }   }
    }

    public static TestSep DeserializeTestSep(JSONNode _buf)
    {
        return new test.TestSep(_buf);
    }

    public readonly int Id;
    public readonly System.Collections.Generic.List<int> A1;
    public readonly System.Collections.Generic.List<int> A2;
    public readonly System.Collections.Generic.List<int> A3;
    public readonly test.SepBean1 X2;
    /// <summary>
    /// SepVector已经定义了sep=,属性
    /// </summary>
    public readonly test.SepVector X3;
    /// <summary>
    /// 用;来分割数据，然后顺序读入SepVector
    /// </summary>
    public readonly System.Collections.Generic.List<test.SepVector> X4;
    /// <summary>
    /// 用;分割数据，然后再将每个数据用,分割，读入
    /// </summary>
    public readonly System.Collections.Generic.List<test.SepBean1> X6;
   
    public const int __ID__ = -543221520;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        X2?.ResolveRef(tables);
        X3?.ResolveRef(tables);
        foreach (var _e in X4) { _e?.ResolveRef(tables); }
        foreach (var _e in X6) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "a1:" + Luban.StringUtil.CollectionToString(A1) + ","
        + "a2:" + Luban.StringUtil.CollectionToString(A2) + ","
        + "a3:" + Luban.StringUtil.CollectionToString(A3) + ","
        + "x2:" + X2 + ","
        + "x3:" + X3 + ","
        + "x4:" + Luban.StringUtil.CollectionToString(X4) + ","
        + "x6:" + Luban.StringUtil.CollectionToString(X6) + ","
        + "}";
    }
}
}

